//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DigitalDataManager.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageData", Namespace="http://schemas.datacontract.org/2004/07/DigitalWcfService.Entityes")]
    [System.SerializableAttribute()]
    public partial class ImageData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.Stream ImageStreamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumName {
            get {
                return this.AlbumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumNameField, value) != true)) {
                    this.AlbumNameField = value;
                    this.RaisePropertyChanged("AlbumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.Stream ImageStream {
            get {
                return this.ImageStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageStreamField, value) != true)) {
                    this.ImageStreamField = value;
                    this.RaisePropertyChanged("ImageStream");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDigitalService")]
    public interface IDigitalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/GetData", ReplyAction="http://tempuri.org/IDigitalService/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/GetData", ReplyAction="http://tempuri.org/IDigitalService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/GetImage", ReplyAction="http://tempuri.org/IDigitalService/GetImageResponse")]
        System.IO.Stream GetImage(string login, string imageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/GetImage", ReplyAction="http://tempuri.org/IDigitalService/GetImageResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync(string login, string imageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/AddNewImage", ReplyAction="http://tempuri.org/IDigitalService/AddNewImageResponse")]
        void AddNewImage(DigitalDataManager.ServiceReference1.ImageData imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/AddNewImage", ReplyAction="http://tempuri.org/IDigitalService/AddNewImageResponse")]
        System.Threading.Tasks.Task AddNewImageAsync(DigitalDataManager.ServiceReference1.ImageData imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/UpdateImage", ReplyAction="http://tempuri.org/IDigitalService/UpdateImageResponse")]
        void UpdateImage(DigitalDataManager.ServiceReference1.ImageData imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/UpdateImage", ReplyAction="http://tempuri.org/IDigitalService/UpdateImageResponse")]
        System.Threading.Tasks.Task UpdateImageAsync(DigitalDataManager.ServiceReference1.ImageData imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/UpdateCatalogVersion", ReplyAction="http://tempuri.org/IDigitalService/UpdateCatalogVersionResponse")]
        void UpdateCatalogVersion(string login, string xmlVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/UpdateCatalogVersion", ReplyAction="http://tempuri.org/IDigitalService/UpdateCatalogVersionResponse")]
        System.Threading.Tasks.Task UpdateCatalogVersionAsync(string login, string xmlVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/GetLastCatalogVersion", ReplyAction="http://tempuri.org/IDigitalService/GetLastCatalogVersionResponse")]
        string GetLastCatalogVersion(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDigitalService/GetLastCatalogVersion", ReplyAction="http://tempuri.org/IDigitalService/GetLastCatalogVersionResponse")]
        System.Threading.Tasks.Task<string> GetLastCatalogVersionAsync(string login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDigitalServiceChannel : DigitalDataManager.ServiceReference1.IDigitalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DigitalServiceClient : System.ServiceModel.ClientBase<DigitalDataManager.ServiceReference1.IDigitalService>, DigitalDataManager.ServiceReference1.IDigitalService {
        
        public DigitalServiceClient() {
        }
        
        public DigitalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DigitalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DigitalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DigitalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.IO.Stream GetImage(string login, string imageName) {
            return base.Channel.GetImage(login, imageName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync(string login, string imageName) {
            return base.Channel.GetImageAsync(login, imageName);
        }
        
        public void AddNewImage(DigitalDataManager.ServiceReference1.ImageData imageData) {
            base.Channel.AddNewImage(imageData);
        }
        
        public System.Threading.Tasks.Task AddNewImageAsync(DigitalDataManager.ServiceReference1.ImageData imageData) {
            return base.Channel.AddNewImageAsync(imageData);
        }
        
        public void UpdateImage(DigitalDataManager.ServiceReference1.ImageData imageData) {
            base.Channel.UpdateImage(imageData);
        }
        
        public System.Threading.Tasks.Task UpdateImageAsync(DigitalDataManager.ServiceReference1.ImageData imageData) {
            return base.Channel.UpdateImageAsync(imageData);
        }
        
        public void UpdateCatalogVersion(string login, string xmlVersion) {
            base.Channel.UpdateCatalogVersion(login, xmlVersion);
        }
        
        public System.Threading.Tasks.Task UpdateCatalogVersionAsync(string login, string xmlVersion) {
            return base.Channel.UpdateCatalogVersionAsync(login, xmlVersion);
        }
        
        public string GetLastCatalogVersion(string login) {
            return base.Channel.GetLastCatalogVersion(login);
        }
        
        public System.Threading.Tasks.Task<string> GetLastCatalogVersionAsync(string login) {
            return base.Channel.GetLastCatalogVersionAsync(login);
        }
    }
}
